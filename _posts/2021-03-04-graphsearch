---
layout: single
title: "Graph Search - BFS and DFS

그래프 탐색 알고리즘 BFS(Breadth First Search)와 DFS(Depth First Search)를 공부하였다. 각각 한국어로는 '넓이 우선 탐색'과 '깊이 우선 탐색'이다. 


BFS(넓이 우선 탐색)의 경우 시작점에서 거리가 0, 1, 2인 정점들을 먼저 차례로 방문하는 탐색법을 말한다. 가까운 순서의 정점대로 모두 방문하는 것이므로 넓게 방문한다는 의미의 이름이 적절하다.
이를 위해서 아직 방문하지 않은 인접 정점들을 큐에 저장해 놓고 큐에서 하나씩 빼면서 그 정점의 인접정점을 다시 큐에 넣는 행위를 반복한다. 이를 큐가 빌 때까지 반복하면 연결된 모든 정점을 방문할 수 있다. 

```c
//Breadth First Search

void bfs_list(GraphType * g, int u) // u는 탐색 시작 정점
{
  QueueType q; // 큐의 선언
  init(&q); // 큐 초기화 
  GraphNode * w;
  
  visited[u] = 1;
  printf("%d", u);
  enqueue(&q, u)
  
  while(is_empty(&q) != 0)
  {
    // 큐에서 하나를 빼서, 그 정점의 인접한 정점을 모두 방문한다. 아직 방문되지 않은 정점의 경우 큐에 삽입한다. 
     int v = dequeue(&q) // 큐는 정수형의 정점을 담는 자료구조이고, v는 큐에서 뽑은 정점이다.  
     for(w = g->adj_list[v]; w != NULL; w = w->link)
     {
        if (visited[w->vertex] == 0) // visited행렬을 참조해서 아직 방문하지 않았으면 
        {
          visited[w->vertex] = 1; // 방문했다고 바꾸고
          printf("%d", w->vertex); // 이를 사용자에게도 표시한다
          enqueue(&q, w->vertex); // 그 정점의 인접 정점도 방문하기 위해 큐에 넣는다. 넓이 우선 탐색이기에 나중에 뽑히도록 stack이 아닌 queue에 넣는 것이ㅏ다 .
        }
      }
   }
```

정말 이렇게 하면 모든 정점을 방문할 수 있는가? 의구심이 남는다. 완전히 알고리즘을 체화하지 않은 것이다. 
큐가 비면 그것은 정말 모든 정점을 방문했다는 뜻인가? 왜? 
      

=====

DFS(Depth First Search)는 깊이 우선 탐색으로, 시작점에서 한 정점을 방문하면 그 정점에서 갈 수 있는 끝까지 간 뒤에 시작점의 다음 정점을 탐색하는 방식의 알고리즘이
이 경우에도 visited 행렬을 이용해서 이미 방문한(==1) 정점은 패스한다. 

```c
void dfs_list(GraphType * g, int u)
{
  visited[u] = 1; //시작점 방문했다고 표시
  printf("%d", u); // 사용자에게도 이를 알려주고
  
  GraphNode * w; //인접정점을 탐색할 용감한 정점포인터 
  for(w = g->adj_list[u]; w !=NULL; w = w->link) 
  {
    if (visited[w] == 0) // 방문한 정점은 1이기 때문에 방문한 정점은 패스할 수 있게 된다. 
    {
      dfs_list(g, w->vertex); // 
     }
   }
}
```
여기서 재귀적 호출이 쓰이는 이유는 무엇인가? 시작점에서 인접 정점으로 이동하면서 거기서 다시 시작하는 dfs는 문제의 크기가 작아진 것이라고 할 수 있다. 
즉 시작점을 제외하고 문제가 다시 시작된 것으로 보는 것이다. 이처럼 재귀는 자료구조와 탐색과 뗄 수 없는 관계에 있다. 



===
추가로 생기는 궁금점들
1. 깊이 우선 탐색, 넓이 우선 탐색은 실무에서 어떻게 쓰일까? 요기요에서는? 
ㅂ
